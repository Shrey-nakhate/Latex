1.Create 
2.Print
3.Bubble Sort
4.Selection Sort
5.Insertion Sort
6.Exit
ENTER YOUR CHOICE: 1

ENTER NO. OF STUDENTS: 3

Enter Name of student 1 :: Rohan

Enter roll_no of student 1 :: 02

Enter marks of student 1 :: 89

Enter Name of student 2 :: Jay

Enter roll_no of student 2 :: 30

Enter marks of student 2 :: 10

Enter Name of student 3 :: Shreya

Enter roll_no of student 3 :: 95

Enter marks of student 3 :: 90

1.Create 
2.Print
3.Bubble Sort
4.Selection Sort
5.Insertion Sort
6.Exit
ENTER YOUR CHOICE: 2

 name    roll no         marks

        Rohan   2       89
        Jay     30      10
        Shreya  95      90
1.Create 
2.Print
3.Bubble Sort
4.Selection Sort
5.Insertion Sort
6.Exit
ENTER YOUR CHOICE: 3

 name    roll no         marks

        Jay     30      10
        Rohan   2       89
        Shreya  95      90
1.Create 
2.Print
3.Bubble Sort
4.Selection Sort
5.Insertion Sort
6.Exit
ENTER YOUR CHOICE: 4

 name    roll no         marks

        Jay     30      10
        Rohan   2       89
        Shreya  95      90
1.Create 
2.Print
3.Bubble Sort
4.Selection Sort
5.Insertion Sort
6.Exit
ENTER YOUR CHOICE: 5

 name    roll no         marks

        Rohan   2       89
        Jay     30      10
        Shreya  95      90
1.Create 
2.Print
3.Bubble Sort
4.Selection Sort
5.Insertion Sort
6.Exit
ENTER YOUR CHOICE: 6
BYE BYE BYE


...Program finished with exit code 0
Press ENTER to exit console.



#include <stdio.h>

typedef struct student
{
    int roll_no;
    char name[30];
    int marks;
} student;

void create(student[], int n);
void display(student st[], int n);
void bubble_sort(student st[], int n);
void selection_sort(student st[], int n);
void insertion_sort(student st[], int n);

int main()
{
    student st[30];
    int n, op;
    do
    {
        printf("\n1.Create \n2.Print\n3.Bubble Sort\n4.Selection Sort\n5.Insertion Sort\n6.Exit");
        printf("\nENTER YOUR CHOICE: ");
        scanf("%d", &op);
        switch (op)
        {
        case 1:
            printf("\nENTER NO. OF STUDENTS: ");
            scanf("%d", &n);
            create(st, n);
            break;
        case 2:
            display(st, n);
            break;
        case 3:
            bubble_sort(st, n);
            display(st, n);
            break;
        case 4:
            selection_sort(st, n);
            display(st, n);
            break;
        case 5:
            insertion_sort(st, n);
            display(st, n);
            break;
        case 6:
            printf("BYE BYE BYE\n");
            break;
        default:
            printf("Invalid choice\n");
        }
    } while (op != 6);
    return 0;
}

void create(student st[], int n)
{
    int i;
    for (i = 0; i < n; i++)
    {
        printf("\nEnter Name of student %d :: ", i + 1);
        scanf("%s", st[i].name);
         printf("\nEnter roll_no of student %d :: ", i + 1);
        scanf("%d", &st[i].roll_no);
         printf("\nEnter marks of student %d :: ", i + 1);
        scanf("%d", &st[i].marks);
    }
}

void display(student st[], int n)
{
    int i;
    printf("\n name \t roll no \t marks\n");
    for (i = 0; i < n; i++)
    {
        printf("\n\t%s\t%d\t%d", st[i].name, st[i].roll_no, st[i].marks);
    }
}

void bubble_sort(student st[], int n)
{
    int i, j;
    student temp;
    for (i = 0;i< n-1; i++)
    {
        for (j = 0; j<n-i-1; j++)
        {
            if (st[j].marks > st[j + 1].marks)
            {
                temp = st[j];
                st[j] = st[j + 1];
                st[j + 1] = temp;
            }
        }
    }
}

void insertion_sort(student st[], int n)
{
    int i, k;
    student y;
    for (k = 1; k < n; k++)
    {
        y = st[k];
        for (i=k-1; i>= 0 && y.roll_no < st[i].roll_no; i--)
        {
            st[i+1] = st[i];
        }
        st[i+1] = y;
    }
}

void selection_sort(student st[], int n)
{
    int i, j, min;
    student temp;
    for (i = 0; i < n - 1; i++)
    {
        min = i;
        for (j=i+1; j<n; j++)
        {
            if (st[j].marks < st[min].marks)
            {
                min = j;
            }
        }
        temp = st[i];
        st[i] = st[min];
        st[min]=temp;
    }
}